import time
from datetime import datetime
from services.mt5_services import initialize_mt5, get_historical_data, shutdown_mt5
from indicators.technical import add_indicators
from src.signal_generator import generate_signal
from src.risk_management import calculate_trade_levels, confirmation_filter
from src.multi_timeframe_analysis import analyze_multi_timeframe  # tu m√≥dulo nuevo
import MetaTrader5 as mt5

SYMBOL = "XAUUSD+"
TIMEFRAME = mt5.TIMEFRAME_M1  # usamos 1 min para detecci√≥n r√°pida

def main():
    try:
        initialize_mt5()
        print("‚úÖ Conectado a MetaTrader 5. Esperando ticks...")

        last_checked_candle_time = None

        while True:
            tick = mt5.symbol_info_tick(SYMBOL)
            if tick is None:
                print("‚ö†Ô∏è No se pudo obtener el tick.")
                time.sleep(1)
                continue

            df = get_historical_data(symbol=SYMBOL, timeframe=TIMEFRAME, days=1)
            if df is None or df.empty:
                print("‚ö†Ô∏è No se pudo obtener datos hist√≥ricos.")
                time.sleep(1)
                continue

            last_candle_time = df.iloc[-1]['time']
            if last_checked_candle_time == last_candle_time:
                time.sleep(1)
                continue

            last_checked_candle_time = last_candle_time
            print(f"\nüïí Nueva vela detectada: {last_candle_time}")

            # Aqu√≠ haces an√°lisis multi-timeframe con tu m√≥dulo nuevo
            signal, levels = analyze_multi_timeframe(SYMBOL)

            print(f"üßæ √öltimo cierre (M1): {df.iloc[-1]['close']}")
            print(f"üéØ Precio actual: Bid={tick.bid}, Ask={tick.ask}")
            print(f"üìä Se√±al generada (MTF): {signal}")

            if signal != "NO TRADE":
                if levels:
                    print(f"‚úÖ Entrada confirmada (MTF): {levels}")
                else:
                    print("‚ö†Ô∏è Se√±al detectada pero sin confirmaci√≥n final (MTF)")
            else:
                print("‚ùå No hay se√±al operable (MTF)")

            time.sleep(1)

    except KeyboardInterrupt:
        print("‚èπÔ∏è Proceso detenido por el usuario.")

    except Exception as e:
        print(f"‚ùå Error inesperado: {e}")

    finally:
        shutdown_mt5()
        print("üõë MetaTrader 5 cerrado.")

if __name__ == "__main__":
    main()

